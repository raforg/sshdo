# sshdo - controls which commands may be executed via incoming ssh
#
# Copyright (C) 2018-2023 raf <raf@raf.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/.
#
# 20230619 raf <raf@raf.org>

=head1 NAME

I<sshdo> - controls which commands may be executed via incoming I<ssh(1)>

=head1 SYNOPSIS

  usage:
   sshdo [label]               # For use as a forced command
   sshdo [options]             # For admin use on the command line

  options:
   -h, --help                  - Output the usage message
   -V, --version               - Output the version message
   -C, --config configfile     - Override default config: /etc/sshdoers
   -c, --check [configfile...] - Check syntax in configuration files
   -l, --learn [logfile...]    - Output config to allow training logs
   -u, --unlearn [logfile...]  - Output config removing unused commands
   -a, --accepting             - For learn/unlearn, accept disallowed

  usage as a forced command in ~/.ssh/authorized_keys:
   command="/usr/bin/sshdo [label]" ssh-rsa AAAA...== user@example.net

  usage as a forced command in /etc/ssh/sshd_config:
   Match User user
   ForceCommand /usr/bin/sshdo [label]

=head1 DESCRIPTION

I<sshdo> provides an easily configurable way of controlling which commands
may be executed via incoming I<ssh(1)> connections.

I<ssh> can be forced to execute a particular command by specifying it in a
C<command=""> option in the C<~/.ssh/authorized_keys> file (or in a
C<ForceCommand> directive in C</etc/ssh/sshd_config>). This is a great
security control but only when only a single command needs to be executed
using the key.

Where there is a need to execute multiple commands using an authorized key,
I<sshdo> can be used as the forced command in the C<~/.ssh/authorized_keys>
file (or C</etc/ssh/sshd_config>), and then the actual commands to be
allowed can be specified in the configuration files, C</etc/sshdoers> and
C</etc/sshdoers.d/*>.

See the I<WHY?> section below for more background information.

See the manual page I<sshdoers(5)> for details on how to specify allowed
commands and who is allowed to execute them.

If a command is allowed, it is logged to the C<auth.info> I<syslog(3)>
facility and priority with C<type="allowed"> and it is then executed. If the
command is not allowed, it is logged to C<auth.err> with
C<type="disallowed"> and it is not executed. If the command is not allowed,
but the user's authorized key is in training mode (see I<sshdoers(5)>), then
it is logged to C<auth.err> with C<type="training"> and it is then executed.
This is useful for learning which commands need to be allowed.

When I<sshdo> is used as a forced command, a command line argument can be
supplied to act as a label for identifying which of the user's authorized
keys was used (e.g. C<command="/usr/bin/sshdo user@example">). If supplied,
it will be included in log messages. Labels are useful for allowing commands
for some but not all of a user's authorized keys (see I<sshdoers(5)>).

Note that the label should not contain whitespace characters (e.g. C<" ">)
or colon characters (C<":">). Any that appear will be replaced with
underscore characters (C<"_">). If multiple command line arguments are
supplied, the whitespace between them will also be replaced with underscore
characters. Also, the label must not start with a dash character (C<"-">) or
it would be interpreted as (probably invalid) command line options.

There are several command line options for performing administrative tasks
(see the I<OPTIONS> section below). When invoked with no command line
options (with the possible exception of the C<--config> option), I<sshdo>
will assume that it is being invoked by I<sshd(8)> as a forced command.

=head1 OPTIONS

The following options are mutually exclusive: C<--help>, C<--version>,
C<--check>, C<--learn> and C<--unlearn>.

=over 4

=item C<-h>, C<--help>

The C<--help> option outputs the usage message.

=item C<-V>, C<--version>

The C<--version> option outputs the version message.

=item C<-C>, C<--config> I<configfile>

The C<--config> option overrides the default configuration file,
C</etc/sshdoers>, with the configuration file specified by the given
I<configfile> argument. I<sshdo> also consults the files in the directory
whose path matches the I<configfile> path with C<".d"> appended to it (e.g.
C</etc/sshdoers.d/>). Any file in that directory whose name starts with a
dot character (C<".">) is ignored.

Note: If the C<--config> option is used, it must be used both in the
C<~/.ssh/authorized_keys> files (or C</etc/ssh/sshd_config>) and on the
command line so that the same configuration is used in both cases. The
C<$SSHDO_CONFIG> environment variable can also be used to specify the
configuration file (see the I<ENVIRONMENT> section below). If both are used,
the C<--config> option takes precedence over the C<$SSHDO_CONFIG>
environment variable.

Note: When overriding the default configuration file, it is strongly
recommended to use an absolute path in order to ensure that I<sshdo> log
messages that relate to different configuration files will be considered as
distinct sets of log messages by the C<--learn> and C<--unlearn> options.

=item C<-c>, C<--check> I<[configfile...]>

The C<--check> option performs a syntax check on the configuration file(s)
specified by the given I<configfile> argument(s), if supplied. Otherwise, it
checks the configuration file specified with the C<--config> option, if
supplied. Otherwise, it checks the configuration file specified by the
C<$SSHDO_CONFIG> environment variable, if defined. Otherwise, it checks the
default configuration file, C</etc/sshdoers>. It also checks the files in
the directory whose path matches the configuration file path with C<".d">
appended to it (e.g. C</etc/sshdoers.d/>). Any file in that directory whose
name starts with a dot character (C<".">) is ignored.

Note that errors in the configuration files wouldn't necessarily prevent
I<sshdo> from functioning. They would just be ignored. But that could mean
that some commands that should be allowed would be disallowed (if any user
names or group names were mistyped, for example). That's why it's important
to check the syntax of configuration files before installing them. Also note
that warnings for things like invalid user names and group names are not
logged during normal use as a forced command. They are only reported by the
C<--check> option.

=item C<-l>, C<--learn> I<[logfile...]>

The C<--learn> option reads the log files specified by the given I<logfile>
arguments, if supplied. Otherwise, it reads the log files specified in the
I<logfiles> directive(s) in the configuration file, if supplied. Otherwise,
it reads the default log files, C</var/log/auth.log*>. Log files can be
uncompressed or I<gzip(1)>-compressed. If the dash character (C<"-">) is
supplied as a I<logfile> argument, log messages are read from standard input
(C<stdin>).

It scans the log files looking for I<sshdo> log messages for commands that
were allowed for training mode or that were disallowed (see I<sshdoers(5)>).
It then outputs the additional configuration that would be necessary to
allow those commands in future. The output can be appended to
C</etc/sshdoers> or placed in a file in C</etc/sshdoers.d/>.

Commands that were allowed for training mode will appear not commented out
in the resulting I<authorization> directives that are output so that they
will become allowed. Commands that were only ever disallowed will appear
commented out so that they will become visible but they will continue to be
disallowed. The C<--accepting> option can also be supplied which causes the
disallowed commands to appear not commented out instead so that they too
will become allowed.

Please check that the output wouldn't allow any command that was disallowed
and that should continue to be disallowed. That's unlikely unless a private
I<ssh> key has been compromised (or just used incorrectly) during the period
covered by the log files, but please check anyway.

If similar commands are encountered that vary only in the digits that appear
on the command line (e.g. sequence numbers or date/time stamps), then a
pattern that matches all of them will be determined (see I<sshdoers(5)>). If
the C<--accepting> option isn't also supplied, and some of a user's uses of
these similar commands were allowed and others were disallowed, then the
corresponding I<authorization> directive that is output will be commented
out and will not allow any of the similar commands. If the C<--accepting>
option is also supplied in this situation, the corresponding
I<authorization> directive that is output will not be commented out and will
allow all of the similar commands.

Training mode and the C<--learn> option make it possible to safely introduce
I<sshdo> into your I<ssh> infrastructure before you even know which commands
need to be allowed. First, edit C</etc/sshdoers> to uncomment the
C<"training"> directive to turn on training mode globally for all users and
keys (see I<sshdoers(5)>). That will cause I<sshdo> to allow the execution
of commands that aren't already in C</etc/sshdoers> or C</etc/sshdoers.d/*>.
Then, add C</usr/bin/sshdo> as the forced command in your
C<~/.ssh/authorized_keys> files (or C</etc/ssh/sshd_config>). Then, some
time later, use C<sshdo --learn> to see what configuration is needed to
allow recent activity. Then, verify that it is correct (or correct it),
install the new configuration, and turn off training mode.

Please be alert to the possibility of malicious log messages that have been
crafted to look like I<sshdo> log messages in order to trick the C<--learn>
option. Malicious (or just erroneous) command executions are also possible.
So please don't be tempted to fully automate the learning process. Always
verify the output of the C<--learn> option. An attack taking place during
training mode might be unlikely, but it is possible.

Note that I<sshdo> isn't intended to be used with authorized keys that are
needed for interactive logins. It is only for authorized keys that are only
used to execute a fixed set of commands so as to make sure that they aren't
used to execute anything else. If an authorized key is needed for
interactive logins, there is nothing to be gained by using I<sshdo> (except
perhaps additional logging). If the C<--learn> option does encounter
interactive logins, it will include them in the output, but they will be
commented out. You can manually uncomment them to allow interactive logins,
but that's probably not a good idea.

Example use of the C<--learn> option:

  # sshdo --learn > /etc/sshdoers.d/.learned
  # vim /etc/sshdoers.d/.learned # Verify that it is correct
  # sshdo --check /etc/sshdoers.d/.learned
  /etc/sshdoers.d/.learned syntax OK
  # cat /etc/sshdoers.d/.learned >> /etc/sshdoers.d/learned
  # rm /etc/sshdoers.d/.learned

=item C<-u>, C<--unlearn> I<[logfile...]>

The C<--unlearn> option reads the log files specified by the given
I<logfile> arguments, if supplied. Otherwise, it reads the log files
specified in the I<logfiles> directive(s) in the configuration file, if
supplied. Otherwise, it reads the default log files, C</var/log/auth.log*>.
Log files can be uncompressed or I<gzip(1)>-compressed. If the dash
character (C<"-">) is supplied as a I<logfile> argument, log messages are
read from standard input (C<stdin>).

It scans the log files looking for I<sshdo> log messages. It examines log
messages for allowed commands, including those that were allowed for
training mode (see I<sshdoers(5)>). If the C<--accepting> option is also
supplied, it examines log messages for disallowed commands as well.

It compares these log messages against the current configuration to identify
any I<authorization> directives that weren't encountered in the log files
and so haven't been needed recently. These directives are candidates for
removal from the configuration. This can assist in maintaining strict least
privilege as requirements change over time.

Bear in mind that, depending on the system's I<logrotate(8)> configuration,
the log files might only be retained for four weeks. That might not be
enough to rely on for the purpose of determining which I<authorization>
directives are no longer needed.

However, if the system retains the log files for long enough for you to know
that the absence of a command from the log files means that the command is
no longer needed, then you could replace the I<authorization> directives in
the current configuration with the output of the C<--unlearn> option.

I<Authorization> directives that have been used recently are output not
commented out so that their commands will continue to be allowed.
I<Authorization> directives that have not been used recently are output
commented out so that their commands will no longer be allowed. This can be
used to replace the I<authorization> directives in the current
configuration, safe in the knowledge that all uses of I<sshdo> that appear
in the log files will continue to be allowed, but that nothing else will.
Note that any negative I<authorization> directives (see I<sshdoers(5)>) will
not be commented out.

If similar commands are encountered that vary only in the digits that appear
on the command line (e.g. sequence numbers or date/time stamps), then a
pattern that matches all of them will be determined (see I<sshdoers(5)>). If
similar I<authorization> directives are encountered in the configuration,
then a pattern that matches all of them will be determined. If there are any
recent uses of such a pattern, the corresponding I<authorization> directive
that is output will not be commented out and will continue to allow all of
the similar commands. If there are no recent uses of such a pattern, the
corresponding I<authorization> directive that is output will be commented
out and will no longer allow any of the similar commands.

Please check that the output wouldn't disallow any command that hasn't been
used recently but that nevertheless still needs to be allowed. That can
happen if the log files aren't retained for long enough to capture
infrequent but necessary commands.

If the C<--unlearn> option encounters any interactive logins, they are
ignored. If they are allowed by the current configuration, they will be
included in the candidate configuration that is output, but they will be
commented out. You can manually uncomment them to continue to allow
interactive logins, but that's probably not a good idea.

If you need to permanently allow interactive logins, and still want to use
I<sshdo>, place the I<authorization> directive(s) somewhere that won't be
overwritten by subsequent uses of the C<--unlearn> option.

Example use of the C<--unlearn> option:

  # sshdo --unlearn --accepting > /etc/sshdoers.d/.learned
  # vim /etc/sshdoers.d/.learned # Verify that it is correct
  # sshdo --check /etc/sshdoers.d/.learned
  /etc/sshdoers.d/.learned syntax OK
  # mv /etc/sshdoers.d/.learned /etc/sshdoers.d/learned

=item C<-a>, C<--accepting>

The C<--accepting> option affects the behaviour of the C<--learn> and
C<--unlearn> options.

By default, the C<--learn> option outputs commented out I<authorization>
directives for disallowed commands. With the C<--accepting> option, these
I<authorization> directives are not commented out. In other words, commands
that were disallowed in the log files will become allowed if the output is
added to the current configuration.

It is not recommended to use the C<--accepting> option with the C<--learn>
option without first inspecting the output of the C<--learn> option without
the C<--accepting> option and verifying that all of the commented out
I<authorization> directives do indeed need to be allowed.

By default, the C<--unlearn> option does not consider disallowed commands
when determining the new candidate configuration that it outputs. With the
C<--accepting> option, it does consider them. In other words, commands that
were disallowed in the log files, but that are allowed by the current
configuration, will continue to be allowed if the output is used to replace
the I<authorization> directives in the current configuration.

It is recommended to use the C<--accepting> option with the C<--unlearn>
option. It's safe in the sense that it won't introduce any additional
I<authorization> directives and not doing so might remove an
I<authorization> directive that was added recently to allow a command that
has so far only appeared in the log files as a disallowed command. That can
happen if training mode wasn't turned on before the new command was first
attempted.

=back

=head1 WHY?

Many systems use I<ssh> keys for authenticating automated maintenance tasks
such as remote backups. Normally, these keys are used to execute a small
fixed set of commands. For fully automated use, the corresponding private
keys will very likely be unencrypted so as not to require a passphrase to
decrypt them before use. If such a private I<ssh> key is compromised, the
adversary can attempt to use it to execute arbitrary commands on any host
where it is an authorized key.

The remote IP address might be controlled via a firewall or I<tcp wrapper>
(i.e. C</etc/hosts.allow>) or an C<AllowUsers> directive in
C</etc/ssh/sshd_config> or a C<from=""> option in the
C<~/.ssh/authorized_keys> file or all of the above, but if the adversary
that compromises the private key is on the host where it resides, then
remote IP controls don't help. They only prevent the adversary from copying
the key to another host and using it from there.

The usual way to prevent an authorized key from being used for arbitrary
command execution is by forcing I<ssh> to execute a fixed command by using a
C<command=""> option in the C<~/.ssh/authorized_keys> file. But that is
limited to forcing a single fixed command. If multiple commands are needed,
then a separate authorized key would be needed for each command, or you
might not bother using forced commands at all and just accept the risks
instead.

I<sshdo> makes it possible to use a single authorized key for any number of
commands by specifying the set of allowed commands in separate configuration
files. This means that even if a private key is compromised, the adversary
can only use it to execute commands that are allowed for that key. It won't
prevent denial of service by overusing those commands, but it can be of help
in preventing post-compromise lateral movement by an adversary.

Even when I<ssh> keys are used to authenticate human users, and their
private keys are encrypted and do require a passphrase before use, or even
if their private keys reside in FIPS 140-validated cryptographic modules, it
might be desirable to limit those humans to executing only a fixed set of
commands. After all, it's not only keys that can become compromised.

This also means that all of the policy relating to allowed commands can
reside in a single file, C</etc/sshdoers>, or a small number of files,
C</etc/sshdoers.d/*>, rather than being hard-coded into individual
C<~/.ssh/authorized_keys> files. This might make it easier to audit your
I<ssh> infrastructure.

Also, by removing the actual forced commands from the keys in
C<~/.ssh/authorized_keys> files, these keys can be installed as is on
multiple hosts even where the commands that need to be executed are
different on each of those hosts. The differences can be expressed in each
host's C</etc/sshdoers> and C</etc/sshdoers.d/*> files, leaving the
authorized keys the same on all hosts. This might make it easier to replace
keys when they near the end of their cryptoperiod.

The hope is that I<sshdo> will make it easy to start using forced commands
where they are not used currently but could be. And training mode and the
C<--learn> and C<--unlearn> options make it easy to achieve and maintain
strict least privilege.

=head1 LOGGING

When used as a forced command, I<sshdo> emits log messages to the C<auth>
I<syslog(3)> facility by default. A different I<syslog> facility can be
specified in the configuration file (see I<sshdoers(5)>). Log messages
contain fields that look like: C<name="value">. The C<type> field can have
the following values: C<"allowed">, C<"training">, C<"disallowed">,
C<"configerror"> or C<"execerror">. Log messages with C<type="allowed"> are
logged with the C<info> priority. All other log messages are logged with the
C<err> priority. The following shows the fields that each type of log
message can have:

  type="allowed"     user="..." remoteip="..." [label="..."] command="..." [group="..."] [config="..."]
  type="training"    user="..." remoteip="..." [label="..."] command="..." [group="..."] [config="..."]
  type="disallowed"  user="..." remoteip="..." [label="..."] command="..." [config="..."]
  type="configerror" user="..." remoteip="..." filename="..." error="..." [config="..."]
  type="configerror" user="..." remoteip="..." filename="..." linenumber="..." line="..." [config="..."]
  type="execerror"   user="..." remoteip="..." [label="..."] command="..." error="..." [config="..."]

The C<user> field contains the name of the local user who is using I<sshdo>
as a forced command.

The C<remoteip> field contains the remote IP address taken from the
C<$SSH_CLIENT> environment variable which is set by I<sshd(8)>.

The C<label> field is included when the I<sshdo> forced command has one or
more command line arguments (e.g. C<command="/usr/bin/sshdo user@example">).
It contains the command line argument(s) with any whitespace characters
(e.g. C<" ">) or colon characters (C<":">) replaced with underscore
characters (C<"_">). This can be used to distinguish between a user's
multiple authorized keys and to identify the remote owner of each authorized
key.

The C<command> field contains the value of the C<$SSH_ORIGINAL_COMMAND>
environment variable which is set by I<sshd>. It contains the command that
was requested to be executed. Any leading or trailing whitespace characters
in the command are removed. Any double quote characters (C<""">) or
backslash characters (C<"\">) in the command are quoted with a preceding
backslash character. Any binary/unprintable characters in the command are
represented using hexadecimal notation (e.g. a newline character would be
represented as C<"\x0a">). For interactive logins (i.e. where no command was
requested), the C<command> field contains C<"E<lt>interactiveE<gt>">.

The C<group> field is included when the command was allowed because of the
user's membership of a group. It contains the name of the group.

The C<error>, C<filename>, C<linenumber> and C<line> fields contain details
about a configuration error (i.e. missing or unreadable file or syntax
error) or an execution error (e.g. out of memory).

The C<config> field contains the configuration file path that was specified
with the C<--config> option or by the C<$SSHDO_CONFIG> environment variable.
It is not included when the default configuration file is used.

=head1 DIAGNOSTICS

C<sshdo --check> can emit the following success message to standard output
(C<stdout>):

  ... syntax OK

Or the following error and warning messages to standard error (C<stderr>):

  error: Failed to read: ...
  error: Invalid config: ...
  warning: Invalid config: ...
  warning: No such user: ...
  warning: No such group: ...
  warning: No such banner: ...
  warning: No such logfiles: ...
  warning: No default log files: ...
  warning: Clashing training mode: ...
  warning: Clashing allow/disallow: ...
  warning: match specified more than once: ...
  warning: syslog specified more than once: ...
  warning: banner specified more than once: ...

C<sshdo --learn> and C<sshdo --unlearn> emit the following error message to
standard error when unable to find any log files:

  error: No log files found: ...

C<sshdo --learn> and C<sshdo --unlearn> emit the following error message to
standard error when unable to read a log file:

  error: Failed to read: ...

When invoked with the C<--accepting> option, but without either the
C<--learn> or C<--unlearn> option, I<sshdo> emits the following error
message to standard error:

  error: The --accepting option requires the --learn or --unlearn option

When invoked with mutually exclusive command line options (with the
exception of the C<--help> or C<--version> option), I<sshdo> emits an error
message like the following to standard error:

  error: The --learn and --unlearn options are mutually exclusive

When invoked with the C<--config> or C<-C> option without its I<configfile>
argument, I<sshdo> emits one of the following error messages to standard
error:

  error: option --config requires argument
  error: option -C requires argument

When invoked with an invalid command line option, I<sshdo> emits an error
message like the following to standard error:

  error: option -? not recognized

=head1 EXIT STATUS

When I<sshdo> is used as a forced command, and the requested command is
allowed and executed, or training mode is turned on and the requested
command is executed, the exit status is the exit status of the requested
command.

When the requested command is disallowed, or when the user's login shell
fails to execute, the exit status is C<1>.

When I<sshdo> is invoked with the C<--check> option, the exit status is C<0>
if the syntax is OK. Otherwise, the exit status is equal to the number of
errors and warnings found (up to a maximum of 255).

When I<sshdo> is invoked with the C<--learn> or C<--unlearn> option, and it
is unable to find any log files, or an error occurs while trying to read a
log file, the exit status is C<1>.

When I<sshdo> is invoked with incorrect or mutually exclusive command line
options (with the exception of the C<--help> or C<--version> option), the
exit status is C<1>.

Otherwise, the exit status is C<0>.

=head1 ENVIRONMENT

When used as a forced command, I<sshdo> uses the C<$SSH_ORIGINAL_COMMAND>
and C<$SSH_CLIENT> environment variables which are both set by I<sshd(8)>.

The C<$SSHDO_CONFIG> environment variable can be defined to specify the path
to the configuration file to use instead of the default, C</etc/sshdoers>.
This is mainly useful for interactive command line use of I<sshdo>. For use
in C<~/.ssh/authorized_keys> files, it's much easier to just use the
C<--config> option.

To specify a different configuration file via the C<$SSHDO_CONFIG>
environment variable for I<sshdo> in a C<~/.ssh/authorized_keys> file, you
need to define it either in a C<~/.ssh/environment> file or in an
C<environment=""> option in the C<~/.ssh/authorized_keys> file and you also
need to enable I<sshd>'s environment processing by including a
C<"PermitUserEnvironment yes"> directive in C</etc/ssh/sshd_config>, but
that's probably not a good idea.

Or you could just define it in the C<command=""> option in the
C<~/.ssh/authorized_keys> file (e.g.
C<command="SSHDO_CONFIG=/usr/local/etc/sshdoers /usr/bin/sshdo">). But you
might as well just use the C<--config> option (e.g.
C<command="/usr/bin/sshdo --config /usr/local/etc/sshdoers">).

=head1 BUGS

No special effort is made to handle very long commands. The I<sshdo> log
messages that contain commands must be able to fit into a I<UDP> packet to
the I<syslogd(8)>-compatible logging service on C<localhost>. Fortunately,
the MTU on the loopback interface is typically very large (e.g. 16KiB or
64KiB) so this shouldn't be a problem. However, if the log messages are
forwarded to another host, use a modern logging system that won't lose
anything. Or only use commands of a reasonable length. According to the
I<syslog> standard (I<RFC 5424>), the maximum I<syslog> packet length that
you can rely on is 480 bytes, but larger packets might work. To be on the
safe side, it is strongly recommended to only use commands that are no more
than about 300 bytes in length. That should be more than enough. If a
command were too long, its log messages would be truncated and so would not
be recognized as I<sshdo> log messages by the C<--learn> and C<--unlearn>
options. Such excessively long commands would therefore require manually
created I<authorization> directives.

By default, the C<--learn> option outputs a commented out I<authorization>
directive for similar commands when any of a user's uses of those similar
commands were disallowed even if there were other uses that were allowed for
training mode. If the C<--accepting> option is also supplied in this
situation, the I<authorization> directive that is output will not be
commented out. Personally, I think that if any of a user's uses of similar
commands were allowed for training mode, then the I<authorization> directive
that is output should not be commented out and should allow all of the
similar commands. I think that it should only be commented out if all of the
user's uses of the similar commands were disallowed. However, I didn't want
to make that decision on behalf of all system administrators. An old adage
is called to mind: Any feature that can't be turned off is a bug. The chosen
behaviour allows system administrators to decide for themselves whether or
not the presence of any disallowed similar commands warrants disallowing all
of the similar commands.

Most of the configuration directives may only appear in the main
configuration file, C</etc/sshdoers>, not in C</etc/sshdoers.d/*> (see
I<sshdoers(5)>). This is intended to standardize I<sshdo>'s configuration,
make it easier to audit, and to eliminate potential nasty surprises. But it
does take choice away from system administrators and so is probably a
mistake.

=head1 FILES

=over 4

=item C</etc/sshdoers> - configures I<sshdo(8)> and specifies allowed commands.

=item C</etc/sshdoers.d/*> - specifies additional allowed commands.

=item C<~/.ssh/authorized_keys> - has I<ssh> keys with C<command="/usr/bin/sshdo">.

=item C</var/log/auth.log> - possible default destination for I<syslog> messages.

=back

=head1 SEE ALSO

I<sshdoers(5)>, I<ssh(1)>, I<sshd(8)>, I<sshd_config(5)>, I<syslog(3)>,
I<syslogd(8)>, I<logrotate(8)>, I<RFC 5424>.

=head1 AUTHOR

raf <raf@raf.org>

=cut
